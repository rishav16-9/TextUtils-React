{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","borderColor","react_default","a","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Navbar","concat","react_router_dom","to","title","aria-label","aria-current","aboutText","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","heading","value","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","console","log","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","defaultProps","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","data-bs-dismiss","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","components_Alert","react_router","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.2c965160.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About(props) {\r\n    \r\n    // If you intially want dark mode when the page loads at very first then use below code\r\n\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'white',\r\n    //     backgroundColor: 'black'\r\n    // })\r\n\r\n    // const [btnText, setBtnText] = useState(\"Enable Light Mode\")\r\n    \r\n    // const toggleStyle = ()=>{\r\n    //     if(myStyle.color == 'white'){\r\n    //         setMyStyle({\r\n    //             color:'black',\r\n    //             backgroundColor:'white',\r\n    //         })\r\n    //         setBtnText(\"Enable Dark Mode\")\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor:'black',\r\n    //             border: '1px solid white'\r\n    //         })\r\n    //         setBtnText(\"Enable Light Mode\")\r\n    //     }\r\n    // }\r\n\r\n\r\n    // If you intially want light mode when the page loads at very first then use below code\r\n\r\n\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n    // })\r\n\r\n    let myStyle = {\r\n        color: props.mode ==='dark'? 'white': '#042743',\r\n        backgroundColor: props.mode ==='dark'? 'rgb(36 74 104)': 'white',\r\n        // border: '1px'\r\n        borderColor:  props.mode ==='dark'? 'white': '#042743',\r\n    }\r\n    \r\n    // const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\r\n    \r\n    // const toggleStyle = ()=>{\r\n    //     if(myStyle.color === 'black'){\r\n    //         setMyStyle({\r\n    //             color:'white',\r\n    //             backgroundColor:'black',\r\n    //             border: '1px solid white'\r\n    //         })\r\n    //         setBtnText(\"Enable Light Mode\")\r\n    //     }    \r\n    //     else{\r\n    //         setMyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor:'white'\r\n    //         })\r\n    //         setBtnText(\"Enable Dark Mode\")\r\n    //     }\r\n    // }\r\n  return (\r\n\r\n    <div className='container'>\r\n        <h1 className='my-3'style={{color: props.mode ==='dark'? 'white': '#042743'}}>About Us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n            <div className=\"accordion-item\" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    <strong>Analyze Your Text</strong>\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        Textutils gives you a way to analyze yout text quickly and efficiently, Be it word count or character count or\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    <strong>Free To Use</strong>\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        TextUtils is a free character counter tool that provides instant character count & word count statistics for a given text. TextUtils reports the number of words and characters. Thus it is suitable for writing text with word character limit.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    <strong>Browser Compatible</strong>\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        This word counter software works in any webbrowser such as chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count character in facebook, blog, books, excel documnet, pdf document, essays, etc.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>    \r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n       <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n       <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"    aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                {/* <a className=\"nav-link\" aria-current=\"page\" href=\"/\">Home</a> */}\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                {/* <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a> */}\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: 'set title here',\r\n  aboutText: 'About'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    // text = \"new text\" // wrong way to change the state\r\n    // setText(\"new text\");  // Correct way to change the state\r\n\r\n    const handleUppercaseClick = ()=>{\r\n        // console.log(\"Upper case was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n    \r\n    const handleLowercaseClick = ()=>{\r\n        // console.log(\"Upper case was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{ \r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n    \r\n    const handleCopy = () => {\r\n        console.log(\"I am copy\");\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        document.getSelection().removeAllRanges()\r\n        // navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Text Copied!\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    return (\r\n    <>\r\n    <div className='container' style={{color: props.mode==='dark'?'white':'#042743'}}>   \r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n\r\n        {/* Button for Upper Text */}\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleUppercaseClick}>Convert to Uppercase</button>\r\n\r\n        {/* Button for Lower Text */}\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleLowercaseClick}>Convert to Lowercase </button>\r\n\r\n        {/* Button to clear the Text */}\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleClearClick}>Clear the Textarea </button>\r\n\r\n        {/* Button to copy the Text */}\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleCopy}>Copy the text </button>\r\n\r\n        {/* Button to remove extra spaces the Text */}\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleExtraSpaces}>Remove extra spaces</button>\r\n\r\n\r\n    </div>\r\n    \r\n    <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n        <h2>Your Text Summary</h2>\r\n        <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} minutes to read te text</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n    </div>\r\n\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) =>{\r\n      const lower = word.toLowerCase();\r\n      return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    <div style={{height: '50px'}}>\r\n    {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n    </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n\n  const [mode, setMode] = useState('light'); // whether tells dark mode is enabled or not\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n   \n  }\n  const toggleMode = ()=>{\n    if (mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // document.title = 'TextUtils Dark mode enables' //changes the title\n      // setInterval(() => {                            // It displays the title frequently\n      //   document.title = 'TextUtil is amazing';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'Install TextUtil now';\n      // }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      // document.title = 'TextUtils Light mode enables'  Changes the title\n    }\n  }\n\n  return(\n    <>\n      {/* for navbar props */}\n      {/* <Navbar title = \"TextUtil\" aboutText = \"About TextUtil\"/> */}\n      {/* <Navbar/> */}\n      <Router>\n        <Navbar title = \"TextUtil\" mode={mode} toggleMode={toggleMode}/>\n        <Alert alert = {alert}/>\n          {/* for TextForm props */}\n        <div className=\"container my-3\">\n          {/* <TextForm showAlert={showAlert} heading = \"Enter The Text To Analyze Below\" mode={mode}/> */}\n          \n              {/* For version 6 * */}\n           <Routes>\n              <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading = \"Enter The Text To Analyze Below\" mode={mode}/>}/>\n              <Route exact path=\"/about\" element={<About mode={mode}/>}/>\n            </Routes> \n\n            {/* Exact match\n                /users --> component 1\n                /users/home --> component 2\n                React uses partial matching so we use exact path\n                For version 5\n\n              <Switch>\n                <Route path=\"/about\">\n                  <About />\n                </Route>\n                <Route path=\"/\">\n                  <TextForm showAlert={showAlert} heading = \"Enter The Text To Analyze Below\" mode={mode}/>\n                </Route>\n              </Switch>       */}\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}