{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","defaultProps","aboutText","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","data-bs-dismiss","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","components_Alert","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.bdec75cd.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n       <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n       <div className=\"container-fluid\">\r\n       {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"    aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\"> */}\r\n                {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n                {/* <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a> */}\r\n              {/* </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: 'set title here',\r\n  aboutText: 'About'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    // text = \"new text\" // wrong way to change the state\r\n    // setText(\"new text\");  // Correct way to change the state\r\n\r\n    const handleUppercaseClick = ()=>{\r\n        // console.log(\"Upper case was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n    \r\n    const handleLowercaseClick = ()=>{\r\n        // console.log(\"Upper case was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{ \r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n    \r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Text Copied!\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    return (\r\n    <>\r\n    <div className='container' style={{color: props.mode==='dark'?'white':'#042743'}}>   \r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n\r\n        {/* Button for Upper Text */}\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleUppercaseClick}>Convert to Uppercase</button>\r\n\r\n        {/* Button for Lower Text */}\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleLowercaseClick}>Convert to Lowercase </button>\r\n\r\n        {/* Button to clear the Text */}\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleClearClick}>Clear the Textarea </button>\r\n\r\n        {/* Button to copy the Text */}\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleCopy}>Copy the text </button>\r\n\r\n        {/* Button to remove extra spaces the Text */}\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleExtraSpaces}>Remove extra spaces</button>\r\n\r\n\r\n    </div>\r\n    \r\n    <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n        <h2>Your Text Summary</h2>\r\n        <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} minutes to read te text</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n    </div>\r\n\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) =>{\r\n      const lower = word.toLowerCase();\r\n      return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    <div style={{height: '50px'}}>\r\n    {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n    </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n\n  const [mode, setMode] = useState('light'); // whether tells dark mode is enabled or not\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n   \n  }\n  const toggleMode = ()=>{\n    if (mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // document.title = 'TextUtils Dark mode enables' //changes the title\n      // setInterval(() => {                            // It displays the title frequently\n      //   document.title = 'TextUtil is amazing';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'Install TextUtil now';\n      // }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      // document.title = 'TextUtils Light mode enables'  Changes the title\n    }\n  }\n\n  return(\n    <>\n      {/* for navbar props */}\n      {/* <Navbar title = \"TextUtil\" aboutText = \"About TextUtil\"/> */}\n      {/* <Navbar/> */}\n      {/* <Router> */}\n        <Navbar title = \"TextUtil\" mode={mode} toggleMode={toggleMode}/>\n        <Alert alert = {alert}/>\n          {/* for TextForm props */}\n        <div className=\"container my-3\">\n          <TextForm exact path = \"/\" showAlert={showAlert} heading = \"Enter The Text To Analyze Below\" mode={mode}/>\n          {/* <About exact path=\"/about\" mode={mode}/> */}\n          \n              {/* For version 6 * */}\n           {/* <Routes>\n              <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading = \"Enter The Text To Analyze Below\" mode={mode}/>}/>\n              <Route exact path=\"/about\" element={<About mode={mode}/>}/>\n            </Routes>  */}\n\n            {/* Exact match\n                /users --> component 1\n                /users/home --> component 2\n                React uses partial matching so we use exact path\n                For version 5\n\n              <Switch>\n                <Route path=\"/about\">\n                  <About />\n                </Route>\n                <Route path=\"/\">\n                  <TextForm showAlert={showAlert} heading = \"Enter The Text To Analyze Below\" mode={mode}/>\n                </Route>\n              </Switch>       */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}